{"version":3,"sources":["components/Header.js","components/Form.js","components/Results.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Form","props","handleWord","event","url","target","value","setState","handleClick","preventDefault","method","id","handleBoth","words","state","goClick","a","fetch","raw","headers","forEach","key","json","data","count","results","console","log","handler","both","onSubmit","this","onChange","type","prompt","onClick","React","Component","Results","Footer","App","handleForm","header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7da54334.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\nfunction Header() {\n  return (<header className=\"App-header\">\n    <div>\n    <h1>ReSTy</h1>\n    </div>\n  </header>);\n}\n\nexport default Header;\n","import React from 'react';\nimport './Form.scss';\n\nclass Form extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: null,\n      method: '',\n      both: '',\n    }\n  }\n\n  handleWord =  event => {\n    let url = event.target.value;\n    this.setState({url: url});\n  }\n\n\n  handleClick = event => {\n    event.preventDefault();\n    let method = event.target.id;\n    this.setState({method})\n  }\n\n  handleBoth = event  => {\n    event.preventDefault();\n    let words = this.state.words; \n    let method = this.state.method;\n    this.setState({words, method});\n  }\n  \n  goClick = async event => {\n   event.preventDefault();\n    let raw = await fetch(this.state.url);\n\n    let headers = {};\n  \n    \n    raw.headers.forEach((value, key) => headers[key] = value);\n\n    let data = await raw.json();\n\n    let count = data.count;\n    let results = data.results;\n    console.log(results);\n    this.props.handler(count, results);\n  }\n\n\n\n  //Form page\n  //Expects a function to be sent to it as a prop\n  //Renders a URL entry form\n  //A selection of REST methods to choose from (“get” should be the default)\n  // On submit\n  //Send the API results back to the <App> using the method sent down in props\n\n  render (){\n    return (\n    <form id=\"form-render\" onSubmit={this.goClick}>\n      <div id=\"questions\">\n      <input onChange={this.handleWord} type=\"text\" id=\"website\"/>\n      <br></br>\n      <button > {this.props.prompt} </button>\n      <br></br>\n      <input value=\"GET\" onClick={this.handleClick} type=\"radio\" id=\"GET\"/>GET\n      <br></br>\n      <input value=\"POST\" onClick={this.handleClick} type=\"radio\" id=\"POST\"/>POST\n      <br></br>\n      <input value=\"PUT\" onClick={this.handleClick} type=\"radio\" id=\"PUT\"/>UPDATE\n      <br></br>\n      <input value=\"DELETE\" onClick={this.handleClick} type=\"radio\" id=\"DELETE\"/>DELETE\n      </div>\n      <>\n      <h3>{this.state.method} {this.state.words} </h3>\n      </>\n      </form>)\n    \n  }\n}\n\nexport default Form;\n\n","import React from 'react';\nimport './Results.scss';\nimport JSONPretty from 'react-json-pretty';\n\n\n\nconst Results = (props) => {\n\n  return (\n\n      <section id=\"results-section\">\n      <h3>Count: {props.count}</h3>\n      <>\n      <JSONPretty headers={props.headers}></JSONPretty>\n      <JSONPretty data={props.results}></JSONPretty>\n      </>\n      </section>\n    \n  )\n\n}\n\nexport default Results;\n\n","import React from 'react';\nimport './Footer.scss';\n\nfunction Footer() {\n  return (<footer className=\"App-footer\">\n    <p> &copy; 2020 Chris Hamersly</p>\n  </footer>);\n}\n\nexport default Footer;\n","\nimport React from 'react';\nimport './App.scss';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Results from './components/Results';\nimport Footer from './components/Footer';\n\n\n//this is the app and also the parent\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      count: 0,\n      results: [],\n      headers: {},\n    }\n  }\n  handleForm = (count , results, headers) => {\n    this.setState({count, results, headers });\n  }\n  \n  //add some stuff here that is the state that can be shared amongst the children\n  render() {\n  return (\n    <div>\n      <Header />\n      <Form prompt=\"Go\" handler={this.handleForm}/>\n      <Results count={this.state.count} results={this.state.results} header={this.state.headers}/>\n      <Footer />\n    </div>\n  );\n\n \n}\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}